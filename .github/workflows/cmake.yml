name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-ubuntu:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Preinstall
        run: sudo apt update -y && sudo apt upgrade -y && sudo add-apt-repository ppa:deadsnakes/ppa -y && sudo apt-get install -y libboost-all-dev python3.11-dev swig && pip3 install numpy && pip3 install wheel

      - name: Submodules update
        run: git submodule update --init --recursive

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build Dependencies
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target bayesopt_external

      - name: ReConfigure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install-python

      - name: Copy dist
        run: cp ${{github.workspace}}/build/dist/pyWilsonSimulation* ${{github.workspace}}/python

      - name: Upload pyWillsonSimulation
        uses: actions/upload-artifact@v3
        with:
          name: Ubuntu-pyWillsonSimulation
          path: ${{github.workspace}}/python

  build-macos-latest:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-11

    steps:
      - uses: actions/checkout@v3

      - name: Preinstall
        run: brew install gsl boost python@3.9 swig && pip3 install numpy && pip3 install wheel && pip install wheel

      - name: Submodules update
        run: git submodule update --init --recursive

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build Dependencies
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target bayesopt_external

      - name: ReConfigure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install-python

      - name: Copy dist
        run: cp ${{github.workspace}}/build/dist/pyWilsonSimulation* ${{github.workspace}}/python

      - name: Upload pyWillsonSimulation
        uses: actions/upload-artifact@v3
        with:
          name: Macos-pyWillsonSimulation
          path: ${{github.workspace}}/python

  build-windows-latest:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Preinstall
        run: git clone https://github.com/Microsoft/vcpkg.git && .\vcpkg\bootstrap-vcpkg.bat && .\vcpkg\vcpkg integrate install && .\vcpkg\vcpkg install boost && .\vcpkg\vcpkg install swig && .\vcpkg\vcpkg install python3.9

      - name: Submodules update
        run: git submodule update --init --recursive

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build Dependencies
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target bayesopt_external

      - name: ReConfigure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install-python

      - name: Copy dist
        run: cp ${{github.workspace}}/build/dist/pyWilsonSimulation* ${{github.workspace}}/python

      - name: Upload pyWillsonSimulation
        uses: actions/upload-artifact@v3
        with:
          name: Windows-pyWillsonSimulation
          path: ${{github.workspace}}/python